using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading;
using System.Threading.Tasks;

namespace Description
{
    public class Description
    {
        /// <summary>
        /// Приложение: последовательность команд которую выполняет компьютер в процессе обработки данных.
        /// </summary>
        public object Application;

        /// <summary>
        /// Процесс - набор ресурсов, используемый отдельным экземпляром приложения.
        /// Каждому процессу выделяется виртуальное адресное пространство. 
        /// Виртуальное адресное пространство гарантирует, что код и данные одного процесса будут недоступны для другого.
        /// Код и данные данные ядра ОС недоступны для процессов.
        /// Каждый экземмпляр приложения запускается в отдельном процессе
        /// </summary>
        public object Process;

        /// <summary>
        /// Поток - концепция, предназначенная для виртуализации процессора.
        /// Каждому Windows-процессу выделяется собственный поток исполнения.
        /// При входе приложения в бесконечный цикл блокируется только связанный с этим кодом процесс, а остальные процессы продолжают функционировать.
        /// </summary>
        public Thread Thread;

        
        /// <summary>
        /// Объект ядра потока
        /// Для каждого созданого потока выделяет и инициализирует одну из структур данных.
        /// Набор свойств этой структуры описывает поток.
        /// Структура содержит контекст потока(блок памяти с набором регистров процессора)
        /// Для разных архитектур контекст потока занимает:
        /// Для х86 - 700 байт
        /// Для х64 - 1240 байт
        /// Для ARM - 350 байт
        /// </summary>
        public object ThreadKernelObject;

        /// <summary>
        /// Блок окружения потока - место в памяти, выделенное и инициализированное в пользовательском режиме (адресное пространство, к которому имеет быстрый доступ код приложений).
        /// Этот блок занимает одну страницу памяти (4 Кбайт). Он содержит заголовок цепочки обработки исключений. Каждый блок try  в который входит поток, вставляет свой узел в начало цепочки. 
        /// Когда поток выходит из блока try, узел из цепочки удаляется. Также TEB содержит локальное хранилице данных для потока и некоторые структуры данных, используемые интерфейсом графических устройств(GDI & OpenGL)
        /// </summary>
        public object ThreadEnvironmentBlock_TEB;

        /// <summary>
        /// Стек пользовательского режима.
        /// Применяется для хранения передаваемых в методы локальных переменных и аргументов.
        /// Также содержит адрес, показывающий, откуда начнет исполнение поток после того, как текущий метод возвратит управление. 
        /// По умолчанию на каждый стек пользовательского режима Windows резервирует 1 Мбайт памяти и добавляет физическую память по мере необходимости при росте стека.
        /// </summary>
        public object UserModeStack;

        /// <summary>
        /// Стек режима ядра.
        /// Используется когда код приложения передает аргументы в функцию операционной системы, находящуюся в режиме ядра.
        /// Windows копирует все аргументы, передаваемые в стек режима ядра кодом в пользовательском режиме, из стека пользовательского режима.
        /// Ядро вызывает собственные методы и использует стек режима ядра для передачи локальных аргументов, а также для сохранения локальных переменных функции и обратного адреса.
        /// Для х32 стек режима ядра занимает 12 Кбайт.
        /// Для х64 стек режима ядра занимает 24 Кбайт.
        /// </summary>
        public object KernelModeStack;

        /// <summary>
        /// Уведомления о создании и завершении потоков.
        /// Если в процессе создается поток, о для всех загруженных в этот процесс DLL-библиотек вызывается метод DllMain с передачей в него флага DLL_THREAD_ATTACH.
        /// При завершении потока в метод DLLMain передается флаг DLL_THREAD_DEATTACH.
        /// При получении уведомлений об этих событиях, DLL - библиотеки могут выполнять опирации инициализации ил очистки для каждого созданного/завершенного в процессе потока.
        /// </summary>
        public object NotificationsAboutCreateAndCompleteThreads;

        /// <summary>
        /// Процесс выполнения потоков в Windows
        /// В произвольный момент времени Windows передает процессору на исполнение оддин поток.
        /// Этот поток исполняется в течение некоторого временного интервала(такта).
        /// После завершения этого интервала контекст переключается на другой поток. Приэтом обязательно происходит следующее:
        ///  1) Значения регистров процессора исполняющегося в данный  момент потока сохраняются в структуре контекста, которая располагается в ядре потока.
        ///  2) Из набора имеющихся потоков выделяется тот, которому будет передано управление. Если выбранный поток принадлежит другому процессу, Windows переключает для процессора виртуальное адресное пространство.
        ///  3) Значения из выбранной структуры контекста потока загружаются в регистры процессора.
        /// </summary>
        public object WindowsExecutingThreads;
    }
}
